---
# Source: sso-keycloak/charts/patroni/templates/networkpolicy.yaml
kind: NetworkPolicy
apiVersion: networking.k8s.io/v1
metadata:
  name: sso-patroni-intra-release
  labels:
    helm.sh/chart: patroni-1.5.1
    app.kubernetes.io/name: sso-patroni
    app.kubernetes.io/instance: test-keycloak
    app.kubernetes.io/version: "2.1-p5"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/part-of: sso-keycloak
spec:
  podSelector:
    matchLabels:
      app.kubernetes.io/name: sso-patroni
      app.kubernetes.io/instance: test-keycloak
  ingress:
  - from:
    - podSelector:
        matchLabels:
          app.kubernetes.io/name: sso-patroni
          app.kubernetes.io/instance: test-keycloak
---
# Source: sso-keycloak/charts/patroni/templates/poddisruptionbudget.yaml
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: sso-patroni-pdb
  labels:
    helm.sh/chart: patroni-1.5.1
    app.kubernetes.io/name: sso-patroni
    app.kubernetes.io/instance: test-keycloak
    app.kubernetes.io/version: "2.1-p5"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/part-of: sso-keycloak
spec:
  minAvailable: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: sso-patroni
      app.kubernetes.io/instance: test-keycloak
---
# Source: sso-keycloak/charts/patroni/templates/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: sso-patroni
  labels:
    helm.sh/chart: patroni-1.5.1
    app.kubernetes.io/name: sso-patroni
    app.kubernetes.io/instance: test-keycloak
    app.kubernetes.io/version: "2.1-p5"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/part-of: sso-keycloak
---
# Source: sso-keycloak/charts/patroni/templates/secret-appusers.yaml
apiVersion: v1
kind: Secret
metadata:
  name: sso-patroni-appusers
  labels:
    helm.sh/chart: patroni-1.5.1
    app.kubernetes.io/name: sso-patroni
    app.kubernetes.io/instance: test-keycloak
    app.kubernetes.io/version: "2.1-p5"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/part-of: sso-keycloak
type: Opaque
data:
  username-appuser1: c3Nva2V5Y2xvYWs=
  password-appuser1: TFUzY1B2MFZMbzZkTVNCS2lVWWxFYkJuTzA5cmpuMEQ=
---
# Source: sso-keycloak/charts/patroni/templates/secret.yaml
apiVersion: v1
kind: Secret
metadata:
  name: sso-patroni
  labels:
    helm.sh/chart: patroni-1.5.1
    app.kubernetes.io/name: sso-patroni
    app.kubernetes.io/instance: test-keycloak
    app.kubernetes.io/version: "2.1-p5"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/part-of: sso-keycloak
type: Opaque
data:
  username-superuser: cG9zdGdyZXM=
  username-admin: YWRtaW4=
  username-standby: c3RhbmRieQ==
  password-superuser: Y0FYU0tRUTNTN0YyaXBkV0R3RXRjWkFmM2MwVWpFdU0=
  password-admin: b2RsQ0gyTTQxS0hVRmtldzROcGFycXlmM2VyRjdpalk=
  password-standby: T1RMamhiNFpmQmNGenFQNEtEcjU5Qms0Nzc0V0F6bEI=
---
# Source: sso-keycloak/templates/pvc-logs.yaml
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: sso-keycloak-logs
  labels:
    helm.sh/chart: sso-keycloak-1.9.0
    app.kubernetes.io/version: "7.6.2-build.2"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/part-of: sso-keycloak
    app.kubernetes.io/name: sso-keycloak
    app.kubernetes.io/instance: test-keycloak
  annotations:
    {}
spec:
  accessModes:
    - "ReadWriteMany"
  storageClassName: "netapp-file-standard"
  resources:
    requests:
      storage: "5Gi"
---
# Source: sso-keycloak/charts/patroni/templates/role.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: sso-patroni
  labels:
    helm.sh/chart: patroni-1.5.1
    app.kubernetes.io/name: sso-patroni
    app.kubernetes.io/instance: test-keycloak
    app.kubernetes.io/version: "2.1-p5"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/part-of: sso-keycloak
rules:
- apiGroups: [""]
  resources: ["configmaps"]
  verbs:
  - create
  - get
  - list
  - patch
  - update
  - watch
  # delete is required only for 'patronictl remove'
  - delete
- apiGroups: [""]
  resources: ["services"]
  verbs:
  - create
- apiGroups: [""]
  resources: ["endpoints"]
  verbs:
  - create
  - get
  - patch
  - update
  # the following three privileges are necessary only when using endpoints
  - list
  - watch
  # delete is required only for for 'patronictl remove'
  - delete
  - deletecollection
- apiGroups: [""]
  resources: ["pods"]
  verbs:
  - get
  - list
  - patch
  - update
  - watch
---
# Source: sso-keycloak/charts/patroni/templates/rolebinding.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: sso-patroni
  labels:
    helm.sh/chart: patroni-1.5.1
    app.kubernetes.io/name: sso-patroni
    app.kubernetes.io/instance: test-keycloak
    app.kubernetes.io/version: "2.1-p5"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/part-of: sso-keycloak
subjects:
  - kind: ServiceAccount
    name: sso-patroni
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: sso-patroni
---
# Source: sso-keycloak/charts/patroni/templates/services.yaml
apiVersion: v1
kind: Service
metadata:
  name: sso-patroni
  labels:
    helm.sh/chart: patroni-1.5.1
    app.kubernetes.io/name: sso-patroni
    app.kubernetes.io/instance: test-keycloak
    app.kubernetes.io/version: "2.1-p5"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/part-of: sso-keycloak
spec:
  type: ClusterIP
  ports:
  - name: postgresql
    port: 5432
    targetPort: 5432
    protocol: TCP
  selector:
    app.kubernetes.io/name: sso-patroni
    app.kubernetes.io/instance: test-keycloak
    spilo-role: master
---
# Source: sso-keycloak/charts/patroni/templates/services.yaml
apiVersion: v1
kind: Service
metadata:
  name: sso-patroni-readonly
  labels:
    helm.sh/chart: patroni-1.5.1
    app.kubernetes.io/name: sso-patroni
    app.kubernetes.io/instance: test-keycloak
    app.kubernetes.io/version: "2.1-p5"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/part-of: sso-keycloak
spec:
  type: ClusterIP
  ports:
  - name: postgresql
    port: 5432
    targetPort: 5432
    protocol: TCP
  selector:
    app.kubernetes.io/name: sso-patroni
    app.kubernetes.io/instance: test-keycloak
    spilo-role: replica
---
# Source: sso-keycloak/templates/service-app.yaml
apiVersion: v1
kind: Service
metadata:
  name: sso-keycloak
  labels:
    helm.sh/chart: sso-keycloak-1.9.0
    app.kubernetes.io/version: "7.6.2-build.2"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/part-of: sso-keycloak
    app.kubernetes.io/name: sso-keycloak
    app.kubernetes.io/instance: test-keycloak
  annotations:
spec:
  type: ClusterIP
  ports:
    - port: 8080
      protocol: TCP

      name: http
      targetPort: http

  selector:
    app.kubernetes.io/name: sso-keycloak
    app.kubernetes.io/instance: test-keycloak
---
# Source: sso-keycloak/templates/service-ping.yaml
apiVersion: v1
kind: Service
metadata:
  name: sso-keycloak-ping
  labels:
    helm.sh/chart: sso-keycloak-1.9.0
    app.kubernetes.io/version: "7.6.2-build.2"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/part-of: sso-keycloak
    app.kubernetes.io/name: sso-keycloak
    app.kubernetes.io/instance: test-keycloak
  annotations:
    description: "The JGroups ping port for clustering."
    service.alpha.kubernetes.io/tolerate-unready-endpoints: "true"
spec:
  clusterIP: None
  ports:
    - port: 8888
      name: ping
      targetPort: ping
      protocol: TCP
  selector:
    app.kubernetes.io/name: sso-keycloak
    app.kubernetes.io/instance: test-keycloak
---
# Source: sso-keycloak/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: sso-keycloak
  labels:
    helm.sh/chart: sso-keycloak-1.9.0
    app.kubernetes.io/version: "7.6.2-build.2"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/part-of: sso-keycloak
    app.kubernetes.io/name: sso-keycloak
    app.kubernetes.io/instance: test-keycloak
spec:
  replicas: 1
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: "25%" # how many pod we can add at a time
      maxUnavailable: 0 # how many pod can be unavailable
  minReadySeconds: 30 # The minimum number of seconds for which a newly created Pod should be ready
  selector:
    matchLabels:
      app.kubernetes.io/name: sso-keycloak
      app.kubernetes.io/instance: test-keycloak
  template:
    metadata:
      labels:
        helm.sh/chart: sso-keycloak-1.9.0
        app.kubernetes.io/version: "7.6.2-build.2"
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/part-of: sso-keycloak
        app.kubernetes.io/name: sso-keycloak
        app.kubernetes.io/instance: test-keycloak
    spec:
      containers:
        - name: sso-keycloak
          image: "ghcr.io/bcgov/sso:7.6.2-build.2"
          imagePullPolicy: IfNotPresent
          resources:
            limits:
              cpu: 2
              memory: 2Gi
            requests:
              cpu: 1250m
              memory: 1Gi
          command: ["/bin/sh", "-c"]
          args:
            - |
              base_config=/opt/eap/standalone/configuration-provisioning/standalone-openshift.xml
              target_config=/opt/eap/standalone/configuration/standalone-openshift.xml
              if [[ -f "$base_config" ]]; then
                  rm "$target_config"
                  cp "$base_config" "$target_config"
              fi;
              /opt/eap/bin/openshift-launch.sh;
          livenessProbe:
            exec:
              command:
              - /bin/bash
              - -c
              - timeout 60 /opt/eap/bin/livenessProbe.sh
            initialDelaySeconds: 120
            periodSeconds: 20
            timeoutSeconds: 1
            successThreshold: 1
            failureThreshold: 5

          readinessProbe:
            exec:
              command:
              - /bin/bash
              - -c
              - timeout 60 /opt/eap/bin/readinessProbe.sh
            initialDelaySeconds: 120
            periodSeconds: 32
            timeoutSeconds: 1
            successThreshold: 1
            failureThreshold: 5

          ports:
            - containerPort: 8778
              name: jolokia
              protocol: TCP
            - containerPort: 8080
              name: http
              protocol: TCP
            - containerPort: 8443
              name: https
              protocol: TCP
            - containerPort: 8888
              name: ping
              protocol: TCP
          env:
            # Postgres Service Endpoint
            - name: DB_POSTGRESQL_SERVICE_HOST
              value: sso-patroni
            - name: DB_POSTGRESQL_SERVICE_PORT
              value: "5432"
            # DB Credentials
            - name: DB_USERNAME
              valueFrom:
                secretKeyRef:
                  name: sso-patroni-appusers
                  key: username-appuser1
            - name: DB_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: sso-patroni-appusers
                  key: password-appuser1
            - name: DB_DATABASE
              value: ssokeycloak
            # DB Admin Credentials
            - name: SSO_ADMIN_USERNAME
              valueFrom:
                secretKeyRef:
                  name: sso-keycloak-admin
                  key: username
            - name: SSO_ADMIN_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: sso-keycloak-admin
                  key: password
            # DB POOL SIZES
            - name: DB_MIN_POOL_SIZE
              value: "5"
            - name: DB_MAX_POOL_SIZE
              value: "20"
            # JGroups Cluster
            - name: JGROUPS_CLUSTER_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: sso-keycloak-jgroups
                  key: cluster-password
            # Additional server startup options (extension of JAVA_OPTS)
            - name: JAVA_OPTS_APPEND
              value: -Dkeycloak.profile.feature.authorization=enabled -Djboss.persistent.log.dir=/var/log/eap
            - name: X509_CA_BUNDLE
              value: /var/run/secrets/kubernetes.io/serviceaccount/service-ca.crt
            # https://access.redhat.com/documentation/en-us/red_hat_jboss_enterprise_application_platform/7.4/html/getting_started_with_jboss_eap_for_openshift_container_platform/reference_information#configuring_dns_ping
            - name: JGROUPS_PING_PROTOCOL
              value: dns.DNS_PING
            - name: OPENSHIFT_DNS_PING_SERVICE_NAME
              value: sso-keycloak-ping
            - name: OPENSHIFT_DNS_PING_SERVICE_PORT
              value: "8888"
            # Other environments
            - name: DB_JNDI
              value: java:jboss/datasources/KeycloakDS
            - name: DB_SERVICE_PREFIX_MAPPING
              value: db-postgresql=DB
            - name: TX_DATABASE_PREFIX_MAPPING
              value: db-postgresql=DB
            - name: TZ
              value: America/Vancouver
          volumeMounts:
            - mountPath: /var/log/eap
              name: logs-volume
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 100
            podAffinityTerm:
              topologyKey: "kubernetes.io/hostname"
              labelSelector:
                matchLabels:
                  app.kubernetes.io/name: sso-keycloak
                  app.kubernetes.io/instance: test-keycloak

      volumes:
        - name: logs-volume
          persistentVolumeClaim:
            claimName: sso-keycloak-logs
---
# Source: sso-keycloak/charts/patroni/templates/statefulset.yaml
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: sso-patroni
  labels:
    helm.sh/chart: patroni-1.5.1
    app.kubernetes.io/name: sso-patroni
    app.kubernetes.io/instance: test-keycloak
    app.kubernetes.io/version: "2.1-p5"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/part-of: sso-keycloak
spec:
  serviceName: sso-patroni
  replicas: 3
  selector:
    matchLabels:
      app.kubernetes.io/name: sso-patroni
      app.kubernetes.io/instance: test-keycloak
  template:
    metadata:
      name: sso-patroni
      labels:
        helm.sh/chart: patroni-1.5.1
        app.kubernetes.io/name: sso-patroni
        app.kubernetes.io/instance: test-keycloak
        app.kubernetes.io/version: "2.1-p5"
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/part-of: sso-keycloak
    spec:
      serviceAccountName: sso-patroni
      containers:
      - name: patroni
        image: "registry.opensource.zalan.do/acid/spilo-13:2.1-p1"
        imagePullPolicy: Always
        # see https://patroni.readthedocs.io/en/latest/rest_api.html#health-check-endpoints
        readinessProbe:
          httpGet:
            scheme: HTTP
            path: /readiness
            port: 8008
          initialDelaySeconds: 3
          periodSeconds: 10
          timeoutSeconds: 5
          successThreshold: 1
          failureThreshold: 3
        livenessProbe:
          httpGet:
            scheme: HTTP
            path: /liveness
            port: 8008
          initialDelaySeconds: 3
          periodSeconds: 10
          timeoutSeconds: 5
          successThreshold: 1
          failureThreshold: 3
        env:
        - name: PGVERSION
          value: "13"
        - name: ALLOW_NOSSL
          value: "true"
        - name: PGUSER_SUPERUSER
          valueFrom:
            secretKeyRef:
              name: sso-patroni
              key: username-superuser
        - name: PGUSER_ADMIN
          valueFrom:
            secretKeyRef:
              name: sso-patroni
              key: username-admin
        - name: PGUSER_STANDBY
          valueFrom:
            secretKeyRef:
              name: sso-patroni
              key: username-standby
        - name: PGPASSWORD_SUPERUSER
          valueFrom:
            secretKeyRef:
              name: sso-patroni
              key: password-superuser
        - name: PGPASSWORD_ADMIN
          valueFrom:
            secretKeyRef:
              name: sso-patroni
              key: password-admin
        - name: PGPASSWORD_STANDBY
          valueFrom:
            secretKeyRef:
              name: sso-patroni
              key: password-standby
        - name: KUBERNETES_ROLE_LABEL
          value: spilo-role
        - name: DCS_ENABLE_KUBERNETES_API
          value: "true"
        - name: KUBERNETES_LABELS
          value: "{ \"app.kubernetes.io/name\": \"sso-patroni\", \"app.kubernetes.io/instance\": \"test-keycloak\" }"
        - name: KUBERNETES_SCOPE_LABEL
          value: "app.kubernetes.io/instance"
        - name: KUBERNETES_USE_CONFIGMAPS
          value: "true"
        - name: SCOPE
          value: test-keycloak
        # WAL-G storage configuration
        - name: USE_WALE
          value: ""
        - name: PGROOT
          value: "/home/postgres/pgdata/pgroot"
        - name: POD_NAMESPACE
          valueFrom:
            fieldRef:
              apiVersion: v1
              fieldPath: metadata.namespace
        ports:
        - containerPort: 8008
        - containerPort: 5432
        volumeMounts:
        - name: storage-volume
          mountPath: "/home/postgres/pgdata"
          subPath: ""
        - mountPath: /etc/patroni
          name: patroni-config
          readOnly: true
        resources:
          {}
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 100
            podAffinityTerm:
              topologyKey: "kubernetes.io/hostname"
              labelSelector:
                matchLabels:
                  app.kubernetes.io/name: sso-patroni
                  app.kubernetes.io/instance: test-keycloak

      volumes:
      - name: patroni-config
        secret:
          secretName: sso-patroni
  volumeClaimTemplates:
    - metadata:
        name: storage-volume
        annotations:
        # https://github.com/helm/helm/issues/7998
        # Let's use more generic labels to make future updates flexible; otherwise it will hit an error like below:
        # Error "Forbidden: updates to statefulset spec for fields other than 'replicas', 'template', and 'updateStrategy' are forbidden" for field "spec".
        labels:
          app.kubernetes.io/name: sso-patroni
          app.kubernetes.io/instance: test-keycloak
      spec:
        accessModes:
        - ReadWriteOnce
        resources:
          requests:
            storage: "10Gi"
        storageClassName: "netapp-block-standard"
---
# Source: sso-keycloak/templates/route.yaml
apiVersion: route.openshift.io/v1
kind: Route
metadata:
  name: sso-keycloak
  labels:
    helm.sh/chart: sso-keycloak-1.9.0
    app.kubernetes.io/version: "7.6.2-build.2"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/part-of: sso-keycloak
    app.kubernetes.io/name: sso-keycloak
    app.kubernetes.io/instance: test-keycloak
  annotations:
    haproxy.router.openshift.io/balance: roundrobin
    haproxy.router.openshift.io/disable_cookies: 'true'
spec:
  tls:
    insecureEdgeTerminationPolicy: Redirect

    termination: edge

  to:
    kind: Service

    name: sso-keycloak
---
# Source: sso-keycloak/templates/secret.yaml
apiVersion: v1
kind: Secret
metadata:
  name: sso-keycloak-admin
  labels:
    helm.sh/chart: sso-keycloak-1.9.0
    app.kubernetes.io/version: "7.6.2-build.2"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/part-of: sso-keycloak
    app.kubernetes.io/name: sso-keycloak
    app.kubernetes.io/instance: test-keycloak
  annotations:
    "helm.sh/hook": "pre-install"
    "helm.sh/hook-delete-policy": "before-hook-creation"
type: Opaque
data:
  username: "RU5MMFA0TUE="
  password: "NE5kVTNWNjBwVTBYcnhKdjZXaUZEMlFBNmkySlA1Mms="
---
# Source: sso-keycloak/templates/secret.yaml
apiVersion: v1
kind: Secret
metadata:
  name: sso-keycloak-jgroups
  labels:
    helm.sh/chart: sso-keycloak-1.9.0
    app.kubernetes.io/version: "7.6.2-build.2"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/part-of: sso-keycloak
    app.kubernetes.io/name: sso-keycloak
    app.kubernetes.io/instance: test-keycloak
  annotations:
    "helm.sh/hook": "pre-install"
    "helm.sh/hook-delete-policy": "before-hook-creation"
type: Opaque
data:
  cluster-password: "djc3dmpMRURTQVlPQlBVdU9lWWU0aUQxUkZ0MHlzUkw="
---
# Source: sso-keycloak/charts/patroni/templates/job-appdb.yaml
apiVersion: batch/v1
kind: Job
metadata:
  name: sso-patroni
  labels:
    helm.sh/chart: patroni-1.5.1
    app.kubernetes.io/name: sso-patroni
    app.kubernetes.io/instance: test-keycloak
    app.kubernetes.io/version: "2.1-p5"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/part-of: sso-keycloak
  annotations:
    "helm.sh/hook": "post-install,post-upgrade"
    "helm.sh/hook-weight": "1"
    "helm.sh/hook-delete-policy": before-hook-creation,hook-succeeded
spec:
  template:
    metadata:
      labels:
        helm.sh/chart: patroni-1.5.1
        app.kubernetes.io/name: sso-patroni
        app.kubernetes.io/instance: test-keycloak
        app.kubernetes.io/version: "2.1-p5"
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/part-of: sso-keycloak
    spec:
      containers:
        - name: initdb
          image: postgres:14.2-alpine
          imagePullPolicy: Always
          command: ["bash", "-c"]
          args:
            - |
              set -euo pipefail;
              echo starting

              usernames=()
              passwords=()
              while IFS= read -r line; do
                key=$(echo $line | cut -f 1 -d '=')
                val=$(echo $line | cut -f 2 -d '=')
                if [[ "$key" = u* ]]; then usernames+=("$val"); else passwords+=("$val"); fi
              done <<<$(printenv | sort | sed -nr '/username-appuser|password-appuser/p')

              index=0
              for username in "${usernames[@]}"
              do
                password="${passwords[$index]}"

                echo "select 'create database $username' where not exists (select from pg_database where datname = '$username')\gexec" | psql -d postgres
                psql -d $username -qta --set on_error_stop=1 <<eof
                do
                \$do\$
                begin
                  if not exists (select from pg_catalog.pg_roles where rolname = '$username') then
                    create role $username login password '$password';
                    grant all privileges on database $username to $username;
                  end if;
                end
                \$do\$;
              eof

                index=$((index + 1))
              done
              echo "done"
          env:
            - name: PGHOST
              value: sso-patroni
            - name: PGPORT
              value: "5432"
            - name: PGUSER
              valueFrom:
                secretKeyRef:
                  name: sso-patroni
                  key: username-superuser
            - name: PGPASSWORD
              valueFrom:
                secretKeyRef:
                  name: sso-patroni
                  key: password-superuser
          envFrom:
            - secretRef:
                name: sso-patroni-appusers
      restartPolicy: Never
  backoffLimit: 1
